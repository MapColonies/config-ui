// This file is auto-generated by @hey-api/openapi-ts

export type error = {
  message: string;
};

export type configName = string;

export type schemaId = string;

export type version = number;

export type createdAt = string;

export type createdBy = string;

export type schemaTree = Array<schemaTreeItem | schemaTreeDir>;

export type schemaTreeItem = {
  name?: string;
  id?: string;
};

export type schemaTreeDir = {
  children?: schemaTree;
  name?: string;
};

export type config = {
  configName: configName;
  schemaId: schemaId;
  version: version;
  config: {
    [key: string]: unknown;
  };
  readonly createdAt: createdAt;
  readonly createdBy: createdBy;
};

export type capabilities = {
  /**
   * The version of the server
   */
  serverVersion: string;
  /**
   * The version of the schemas package
   */
  schemasPackageVersion: string;
  /**
   * a flag that indicates if the pubsub is enabled for config change notifications
   */
  pubSubEnabled: boolean;
};

/**
 * Filters objects based on the exact value of the configName property.
 */
export type ParameterConfigNameQuery = configName;

/**
 * Filters objects where the schemaId property exactly matches the specified URL.
 */
export type ParameterSchemaIdQuery = schemaId;

/**
 * Filters objects where the version property exactly matches the specified version string.
 */
export type ParameterVersionQuery = version | 'latest';

/**
 * Filters objects where the createdAt property is greater than the specified date-time value (format: ISO 8601).
 */
export type ParameterCreatedAtGreaterThanQuery = createdAt;

/**
 * Filters objects where the createdAt property is less than the specified date-time value (format: ISO 8601).
 */
export type ParameterCreatedAtLessThanQuery = createdAt;

/**
 * Filters objects based on the exact value of the createdBy property.
 */
export type ParameterCreatedByQuery = createdBy;

/**
 * Specifies the number of items to skip before starting to return results.
 */
export type ParameterOffsetQuery = number;

/**
 * Specifies the maximum number of items to return.
 */
export type ParameterLimitQuery = number;

/**
 * Search term for full-text search across relevant properties (implementation specific).
 */
export type ParameterFullTextQuery = string;

export type GetConfigsData = {
  /**
   * Filters objects based on the exact value of the configName property.
   */
  configName?: configName;
  /**
   * Filters objects where the createdAt property is greater than the specified date-time value (format: ISO 8601).
   */
  createdAtGt?: createdAt;
  /**
   * Filters objects where the createdAt property is less than the specified date-time value (format: ISO 8601).
   */
  createdAtLt?: createdAt;
  /**
   * Filters objects based on the exact value of the createdBy property.
   */
  createdBy?: createdBy;
  /**
   * Specifies the maximum number of items to return.
   */
  limit?: number;
  /**
   * Specifies the number of items to skip before starting to return results.
   */
  offset?: number;
  /**
   * Search term for full-text search across relevant properties (implementation specific).
   */
  q?: string;
  /**
   * Filters objects where the schemaId property exactly matches the specified URL.
   */
  schemaId?: schemaId;
  /**
   * Filters objects where the version property exactly matches the specified version string.
   */
  version?: version | 'latest';
};

export type GetConfigsResponse = {
  configs?: Array<config>;
  total?: number;
};

export type UpsertConfigData = {
  /**
   * If no version is provided and no version with the same name exists, a new config will be created. If a version is provided, a new version of an existing config will be created. The version provided should match the latest version of the existing config.
   */
  requestBody: config;
};

export type UpsertConfigResponse = unknown;

export type GetConfigsByNameData = {
  name: configName;
};

export type GetConfigsByNameResponse = config;

export type GetVersionedConfigData = {
  name: configName;
  version: 'latest' | version;
};

export type GetVersionedConfigResponse = config;

export type GetSchemaData = {
  /**
   * The id of the requested schema
   */
  id: schemaId;
  /**
   * should the server bundle all refs into one schema
   */
  shouldDereference?: boolean;
};

export type GetSchemaResponse = {
  [key: string]: unknown;
};

export type GetSchemasTreeResponse = schemaTree;

export type GetCapabilitiesResponse = capabilities;

export type $OpenApiTs = {
  '/config': {
    get: {
      req: GetConfigsData;
      res: {
        /**
         * Array containing all the configs returned based on the filters
         */
        200: {
          configs?: Array<config>;
          total?: number;
        };
        /**
         * BadRequest
         */
        400: error;
        /**
         * Internal Server Error
         */
        500: error;
      };
    };
    post: {
      req: UpsertConfigData;
      res: {
        /**
         * Created
         */
        201: unknown;
        /**
         * BadRequest
         */
        400: error;
        /**
         * conflict
         */
        409: error;
        /**
         * Internal Server Error
         */
        500: error;
      };
    };
  };
  '/config/{name}': {
    get: {
      req: GetConfigsByNameData;
      res: {
        /**
         * Array containing all the configs with the specific name
         */
        200: config;
        /**
         * BadRequest
         */
        400: error;
        /**
         * Not Found - If client does not exist
         */
        404: error;
        /**
         * Internal Server Error
         */
        500: error;
      };
    };
  };
  '/config/{name}/{version}': {
    get: {
      req: GetVersionedConfigData;
      res: {
        /**
         * Object containing the config with the specific name and version or the latest version
         */
        200: config;
        /**
         * BadRequest
         */
        400: error;
        /**
         * Not Found - If client does not exist
         */
        404: error;
        /**
         * Internal Server Error
         */
        500: error;
      };
    };
  };
  '/schema': {
    get: {
      req: GetSchemaData;
      res: {
        /**
         * OK
         */
        200: {
          [key: string]: unknown;
        };
        /**
         * BadRequest
         */
        400: error;
        /**
         * Not Found - If client does not exist
         */
        404: error;
        /**
         * Internal Server Error
         */
        500: error;
      };
    };
  };
  '/schema/tree': {
    get: {
      res: {
        /**
         * OK
         */
        200: schemaTree;
        /**
         * BadRequest
         */
        400: error;
        /**
         * Internal Server Error
         */
        500: error;
      };
    };
  };
  '/capabilities': {
    get: {
      res: {
        /**
         * OK
         */
        200: capabilities;
        /**
         * BadRequest
         */
        400: error;
        /**
         * Internal Server Error
         */
        500: error;
      };
    };
  };
};
