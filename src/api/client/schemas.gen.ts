// This file is auto-generated by @hey-api/openapi-ts

export const $error = {
  type: 'object',
  required: ['message'],
  properties: {
    message: {
      type: 'string',
    },
  },
} as const;

export const $configName = {
  type: 'string',
  pattern: '^([a-z0-9]+(-[a-z0-9]+)*)$',
  maxLength: 50,
} as const;

export const $schemaId = {
  type: 'string',
  pattern: '^https:\\/\\/mapcolonies\\.com\\/.+$',
  example: 'https://mapcolonies.com/common/db/v1',
} as const;

export const $version = {
  type: 'integer',
  minimum: 1,
} as const;

export const $createdAt = {
  type: 'string',
  format: 'date-time',
} as const;

export const $createdBy = {
  type: 'string',
  maxLength: 50,
} as const;

export const $schemaTree = {
  type: 'array',
  example: [
    {
      name: 'common',
      children: [
        {
          name: 'boilerplate',
          children: [
            {
              name: 'v1',
              id: 'https://mapcolonies.com/common/boilerplate/v1',
            },
            {
              name: 'v2',
              id: 'https://mapcolonies.com/common/boilerplate/v2',
            },
            {
              name: 'v3',
              id: 'https://mapcolonies.com/common/boilerplate/v3',
            },
          ],
        },
        {
          name: 'db',
          children: [
            {
              name: 'v1',
              id: 'https://mapcolonies.com/common/db/v1',
            },
          ],
        },
      ],
    },
  ],
  items: {
    oneOf: [
      {
        $ref: '#/components/schemas/schemaTreeItem',
      },
      {
        $ref: '#/components/schemas/schemaTreeDir',
      },
    ],
  },
} as const;

export const $schemaTreeItem = {
  type: 'object',
  required: ['name', 'id'],
  properties: {
    name: {
      type: 'string',
    },
    id: {
      $ref: '#/components/schemas/schemaId',
    },
  },
} as const;

export const $schemaTreeDir = {
  type: 'object',
  required: ['children', 'name'],
  properties: {
    children: {
      $ref: '#/components/schemas/schemaTree',
    },
    name: {
      type: 'string',
    },
  },
} as const;

export const $config = {
  type: 'object',
  additionalProperties: false,
  required: ['configName', 'schemaId', 'version', 'config', 'createdAt', 'createdBy'],
  properties: {
    configName: {
      $ref: '#/components/schemas/configName',
    },
    schemaId: {
      $ref: '#/components/schemas/schemaId',
    },
    version: {
      $ref: '#/components/schemas/version',
    },
    config: {
      additionalProperties: true,
      example: {
        host: 'localhost',
        port: 8080,
      },
    },
    createdAt: {
      readOnly: true,
      allOf: [
        {
          $ref: '#/components/schemas/createdAt',
        },
      ],
    },
    createdBy: {
      readOnly: true,
      allOf: [
        {
          $ref: '#/components/schemas/createdBy',
        },
      ],
    },
    isLatest: {
      type: 'boolean',
      readOnly: true,
    },
  },
} as const;

export const $capabilities = {
  type: 'object',
  required: ['serverVersion', 'schemasPackageVersion', 'pubSubEnabled'],
  properties: {
    serverVersion: {
      description: 'The version of the server',
      type: 'string',
    },
    schemasPackageVersion: {
      description: 'The version of the schemas package',
      type: 'string',
    },
    pubSubEnabled: {
      description: 'a flag that indicates if the pubsub is enabled for config change notifications',
      type: 'boolean',
    },
  },
} as const;
