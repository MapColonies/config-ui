// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type {
  GetConfigsData,
  GetConfigsResponse,
  UpsertConfigData,
  UpsertConfigResponse,
  GetVersionedConfigData,
  GetVersionedConfigResponse,
  GetSchemaData,
  GetSchemaResponse,
  GetSchemasTreeResponse,
  GetCapabilitiesResponse,
} from './types.gen';

/**
 * get configs based on filters
 * @param data The data for the request.
 * @param data.q Search term for full-text search across relevant properties (implementation specific).
 * @param data.configName Filters objects based on the exact value of the configName property.
 * @param data.schemaId Filters objects where the schemaId property exactly matches the specified URL.
 * @param data.version Filters objects where the version property exactly matches the specified version string.
 * @param data.createdAtGt Filters objects where the createdAt property is greater than the specified date-time value (format: ISO 8601).
 * @param data.createdAtLt Filters objects where the createdAt property is less than the specified date-time value (format: ISO 8601).
 * @param data.createdBy Filters objects based on the exact value of the createdBy property.
 * @param data.offset Specifies the number of items to skip before starting to return results.
 * @param data.limit Specifies the maximum number of items to return.
 * @param data.sort Sorts the results based on the value of one or more properties.
 * The value is a comma-separated list of property names and sort order.
 * properties should be separated by a colon and sort order should be either asc or desc. For example: configName:asc,schemaId:desc
 * The default sort order is ascending. If the sort order is not specified, the default sort order is used. Each property is only allowed to appear once in the list.
 * @returns unknown Array containing all the configs returned based on the filters
 * @throws ApiError
 */
export const getConfigs = (data: GetConfigsData = {}): CancelablePromise<GetConfigsResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/config',
    query: {
      q: data.q,
      config_name: data.configName,
      schema_id: data.schemaId,
      version: data.version,
      created_at_gt: data.createdAtGt,
      created_at_lt: data.createdAtLt,
      created_by: data.createdBy,
      offset: data.offset,
      limit: data.limit,
      sort: data.sort,
    },
    errors: {
      400: 'BadRequest',
      422: 'Unprocessable Entity',
      500: 'Internal Server Error',
    },
  });
};

/**
 * Create a new config or a new version of an existing config
 * @param data The data for the request.
 * @param data.requestBody If no version is provided and no version with the same name exists, a new config will be created. If a version is provided, a new version of an existing config will be created. The version provided should match the latest version of the existing config.
 * @returns unknown Created
 * @throws ApiError
 */
export const upsertConfig = (data: UpsertConfigData): CancelablePromise<UpsertConfigResponse> => {
  return __request(OpenAPI, {
    method: 'POST',
    url: '/config',
    body: data.requestBody,
    mediaType: 'application/json',
    errors: {
      400: 'BadRequest',
      409: 'conflict',
      500: 'Internal Server Error',
    },
  });
};

/**
 * get a specific version of a config
 * @param data The data for the request.
 * @param data.name The name of the config
 * @param data.version
 * @param data.schemaId The id of the requested schema
 * @param data.shouldDereference should the server bundle all refs into one config
 * @returns config Object containing the config with the specific name and version or the latest version
 * @throws ApiError
 */
export const getVersionedConfig = (data: GetVersionedConfigData): CancelablePromise<GetVersionedConfigResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/config/{name}/{version}',
    path: {
      name: data.name,
      version: data.version,
    },
    query: {
      shouldDereference: data.shouldDereference,
      schemaId: data.schemaId,
    },
    errors: {
      400: 'BadRequest',
      404: 'Not Found - If client does not exist',
      500: 'Internal Server Error',
    },
  });
};

/**
 * returns the requested schema
 * @param data The data for the request.
 * @param data.id The id of the requested schema
 * @param data.shouldDereference should the server bundle all refs into one schema
 * @returns unknown OK
 * @throws ApiError
 */
export const getSchema = (data: GetSchemaData): CancelablePromise<GetSchemaResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/schema',
    query: {
      id: data.id,
      shouldDereference: data.shouldDereference,
    },
    errors: {
      400: 'BadRequest',
      404: 'Not Found - If client does not exist',
      500: 'Internal Server Error',
    },
  });
};

/**
 * return a tree representation of all the schemas
 * @returns schemaTree OK
 * @throws ApiError
 */
export const getSchemasTree = (): CancelablePromise<GetSchemasTreeResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/schema/tree',
    errors: {
      400: 'BadRequest',
      500: 'Internal Server Error',
    },
  });
};

/**
 * get all capabilities about the server
 * @returns capabilities OK
 * @throws ApiError
 */
export const getCapabilities = (): CancelablePromise<GetCapabilitiesResponse> => {
  return __request(OpenAPI, {
    method: 'GET',
    url: '/capabilities',
    errors: {
      400: 'BadRequest',
      500: 'Internal Server Error',
    },
  });
};
